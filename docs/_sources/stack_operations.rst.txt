Stack Operations
----------------

**Pushing Instructions**
~~~~~~~~~~~~~~~~~~~~~~~~

Instructions can be pushed onto the stack by enclosing them in square brackets []. These instructions can then be executed using the `apply` operation.


**drop**
~~~~~~~~

The `drop` operation removes the top value from the stack.

Example:

.. code-block:: text

    5 3 drop => 5


**dup**
~~~~~~~

The `dup` operation (usage: dup or dup0, dup1, dup2, ...) duplicates a value on the stack and pushes the duplicate onto the stack.

Example:

.. code-block:: text

    4 dup => 4 4
    5 3 2 4 dup3 => 5 3 2 4 5

Alternatively you can duplicate 2 values with the instruction dup('instruction') where the command 'instruction' is executed, then it pops from the stack the index of the value to duplicate

.. code-block:: text

    7 8 dup(5 1) => 7 8 5 dup(1) => 7 8 5 5

    23 2 5 3 1 dup(size 1 -) => 23 2 5 3 1 23

**swap**
~~~~~~~~

The `swap` operation (usage same as dup: swap or swap1, swap2, swap3 ...) swaps the positions of the top two values on the stack.

Example:

.. code-block:: text

    5 3 swap => 3 5

    7 2 4 3 22 swap4 => 22 2 4 3 7

Alternatively you can swap 2 values with the instruction swap(instruction) where the command 'instruction' is executed, then it pops from the stack the index to swap with

.. code-block:: text

    5 3 swap(1 2) => 5 3 1 swap(2) => 1 3 5

    7 2 4 3 22 swap(size 1 -) => 22 2 4 3 7

**bottom**
~~~~~~~~~~

The `bottom` operation duplicates the top value on the stack and pushes it onto the stack without removing the original.

Example:

.. code-block:: text

    4 5 7 3 2 1 bottom => 4 5 7 3 2 1 4

**compose**
~~~~~~~~~~~

The `compose` operation composes a new instruction by concatenating the top two instructions on the stack and pushes the result onto the stack.

Example:

.. code-block:: text

    [swap] [apply] compose => [swap apply]

**apply**
~~~~~~~~~

The `apply` operation pops a list of instructions from the stack and executes them. This is typically used to execute instructions pushed onto the stack using square brackets.

Example:

.. code-block:: text

    [3 4 *] apply => 12

**quote**
~~~~~~~~~

The `quote` operation quotes the first value on the stack.

.. code-block:: text

    3 quote => [3]

**clear**
~~~~~~~~~

The `clear` operation clears the entire stack.

**Special Values**
~~~~~~~~~~~~~~~~~~

- `last`: A boolean value indicating whether the current value is the last pushed onto the stack.
- `empty`: A boolean value indicating whether the stack is empty.
- `sizemax`: The maximum size of the stack.
- `size`: The current size of the stack. When executed, it pushes the size onto the stack.
